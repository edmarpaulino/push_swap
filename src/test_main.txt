# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    test_main.txt                                      :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: edpaulin <edpaulin@student.42sp.org.br>    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2021/11/14 16:02:12 by edpaulin          #+#    #+#              #
#    Updated: 2021/11/22 19:46:22 by edpaulin         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "push_swap.h"
#include <stdio.h>

void	stack_print(t_data *data)
{
	t_stack_node	*node_a;
	t_stack_node	*node_b;
	
	node_a = data->stack_a->top;
	node_b = data->stack_b->top;
	printf("================================\n");
	while (node_a || node_b)
	{
		if (node_a != NULL && node_b == NULL)
		{
			printf("a->	%d\tb->	\n", node_a->content);
			// printf("a->	%p\tb->	%p\n", node_a, node_b);
		}
		else if (node_a == NULL && node_b != NULL)
		{
			printf("a->	\tb->	%d\n", node_b->content);
			// printf("a->	%p\tb->	%p\n", node_a, node_b);
		}
		else if (node_a != NULL && node_b != NULL)
		{
			printf("a->	%d\tb->	%d\n", node_a->content, node_b->content);
			// printf("a->	%p\tb->	%p\n", node_a, node_b);
		}
		if (node_a)
			node_a = node_a->prev;
		if (node_b)
			node_b = node_b->prev;
	}
	printf("================================\n");
}

void	test_stack(t_data *data, int size)
{
	stack_print(data);
	swap(data->stack_a);
	stack_print(data);
	rotate(data->stack_a);
	stack_print(data);
	reverse_rotate(data->stack_a);
	stack_print(data);
	while (data->stack_a->size != 0)
		push(data->stack_a, data->stack_b);
	// push(data->stack_a, data->stack_b);
	stack_print(data);
	swap(data->stack_b);
	stack_print(data);
	rotate(data->stack_b);
	stack_print(data);
	reverse_rotate(data->stack_b);
	stack_print(data);
	while (data->stack_b->size != size)
		push(data->stack_b, data->stack_a);
	// push(data->stack_b, data->stack_a);
	stack_print(data);
	double_swap(data);
	stack_print(data);
	double_rotate(data);
	stack_print(data);
	double_reverse_rotate(data);
	stack_print(data);
}

int	main(int argc, char **argv)
{
	t_data	*data;

	check_start_arguments(argc, (const char **)argv);
	data = malloc(sizeof(t_data));
	if (!data)
	{
		ft_putendl_fd("Error", 2);
		return (1);
	}
	init(argc, argv, data);
	test_stack(data, ((argc - 1) / 2));
	data_destroy(data);
	return (0);
}
